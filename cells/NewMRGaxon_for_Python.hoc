/*--------------------------------------------------------------------
This model is modified from the MRG model published in
Journal of Neurophysiology 87:995-1006, 2002.

The dynamics of the new model can be found in
Cell Systems, 11(6), pp.557-572.
----------------------------------------------------------------------*/


proc model_globels() {			
	celsius=37			
	//v_init=-89.6 //mV//  		
	//dt=0.005 //ms//         	
	//tstop=10
//topological parameters//		
	//see Python code, Cell.py under Class MRG
	//defines: axonnodes; paranodes1; paranodes2; axoninter; axontotal
//morphological parameters//	
	//fiberD = see Python code	//choose from 5.7, 7.3, 8.7, 10.0, 11.5, 12.8, 14.0, 15.0, 16.0
	paralength1=3  
	nodelength=1.0
	space_p1=0.002  
	space_p2=0.004
	space_i=0.004
//electrical parameters//		
	rhoa=0.7e6 //Ohm-um//
	mycm=0.1 //uF/cm2/lamella membrane//
	mygm=0.001 //S/cm2/lamella membrane//
	nstins=numberOfStinCompartmentsPerStretch

/*
	nstins=6
	axonnodes=20
	paranodes1=2*(axonnodes-1)
	paranodes2=2*(axonnodes-1)
	axoninter=nstins*(axonnodes-1)
	fiberD=3.0
*/
}
model_globels ()

proc dependent_var() {
	if (fiberD==2.0) {axonD=1.6 nodeD=1.4 paraD1=1.4 paraD2=1.6 deltax=117 paralength2=10 nl=30}
	if (fiberD==3.0) {axonD=2.3 nodeD=1.6 paraD1=1.6 paraD2=2.3 deltax=309 paralength2=21 nl=56}
	if (fiberD==5.7) {g=0.605 axonD=3.4 nodeD=1.9 paraD1=1.9 paraD2=3.4 deltax=500 paralength2=35 nl=80}
	if (fiberD==7.3) {g=0.630 axonD=4.6 nodeD=2.4 paraD1=2.4 paraD2=4.6 deltax=750 paralength2=38 nl=100}
	if (fiberD==8.7) {g=0.661 axonD=5.8 nodeD=2.8 paraD1=2.8 paraD2=5.8 deltax=1000 paralength2=40 nl=110}
	if (fiberD==10.0) {g=0.690 axonD=6.9 nodeD=3.3 paraD1=3.3 paraD2=6.9 deltax=1150 paralength2=46 nl=120}
	if (fiberD==11.5) {g=0.700 axonD=8.1 nodeD=3.7 paraD1=3.7 paraD2=8.1 deltax=1250 paralength2=50 nl=130}
	if (fiberD==12.8) {g=0.719 axonD=9.2 nodeD=4.2 paraD1=4.2 paraD2=9.2 deltax=1350 paralength2=54 nl=135}
	if (fiberD==14.0) {g=0.739 axonD=10.4 nodeD=4.7 paraD1=4.7 paraD2=10.4 deltax=1400 paralength2=56 nl=140}
	if (fiberD==15.0) {g=0.767 axonD=11.5 nodeD=5.0 paraD1=5.0 paraD2=11.5 deltax=1450 paralength2=58 nl=145}
	if (fiberD==16.0) {g=0.791 axonD=12.7 nodeD=5.5 paraD1=5.5 paraD2=12.7 deltax=1500 paralength2=60 nl=150}
	Rpn0=(rhoa*.01)/(PI*((((nodeD/2)+space_p1)^2)-((nodeD/2)^2)))
	Rpn1=(rhoa*.01)/(PI*((((paraD1/2)+space_p1)^2)-((paraD1/2)^2)))
	Rpn2=(rhoa*.01)/(PI*((((paraD2/2)+space_p2)^2)-((paraD2/2)^2)))
	Rpx=(rhoa*.01)/(PI*((((axonD/2)+space_i)^2)-((axonD/2)^2)))
	interlength=(deltax-nodelength-(2*paralength1)-(2*paralength2))/6
	}
dependent_var()

create node[axonnodes], MYSA[paranodes1], FLUT[paranodes2], STIN[axoninter]
access node[0]	//APD

proc initialize(){
	for i=0,axonnodes-1 {
		node[i]{					
			nseg=1
			diam=nodeD
			L=nodelength
			Ra=rhoa/10000
			cm=2
            insert newaxnode
			//insert myaxnode
			//insert hh
			//gnapbar_axnode=0 // for small fibers
			insert extracellular xraxial=Rpn0 xg=1e10 xc=0
			}
		}
	for i=0, paranodes1-1 {
		MYSA[i]{
			nseg=1
			diam=fiberD
			L=paralength1
			Ra=rhoa*(1/(paraD1/fiberD)^2)/10000
			cm=2*paraD1/fiberD
			insert pas
			g_pas=0.001*paraD1/fiberD		
			e_pas=v_init
			insert extracellular xraxial=Rpn1 xg=mygm/(nl*2) xc=mycm/(nl*2)
			}
	}
	for i=0, paranodes2-1 {
		FLUT[i]{
			nseg=1
			diam=fiberD
			L=paralength2
			Ra=rhoa*(1/(paraD2/fiberD)^2)/10000
			cm=2*paraD2/fiberD
			insert pas
			g_pas=0.0001*paraD2/fiberD		
			e_pas=v_init
			insert extracellular xraxial=Rpn2 xg=mygm/(nl*2) xc=mycm/(nl*2)
			}
	}
	for i=0, axoninter-1 {
		STIN[i]{
			nseg=1
			diam=fiberD
			L=interlength
			Ra=rhoa*(1/(axonD/fiberD)^2)/10000
			cm=2*axonD/fiberD
			insert pas
			g_pas=0.0001*axonD/fiberD
			e_pas=v_init
			insert extracellular xraxial=Rpx xg=mygm/(nl*2) xc=mycm/(nl*2)
			}
	}
}
initialize()

//connect the axon elements
proc connect_elements(){
    // Disconnect all
    forall disconnect()

    // CONNECT AXONAL ELEMENTS
    for i =0, axonnodes-2 {
        connect MYSA[2*i](0), node[i](1)
        connect FLUT[2*i](0), MYSA[2*i](1)

        connect STIN[nstins*i](0), FLUT[2*i](1)

        for gg=0,nstins-2 {
            connect STIN[nstins*i+gg+1](0), STIN[nstins*i+gg](1)
        }

        connect FLUT[2*i+1](0), STIN[nstins*i+nstins-1](1)
        connect MYSA[2*i+1](0), FLUT[2*i+1](1)
        connect node[i+1](0), MYSA[2*i+1](1)
    }
}
connect_elements()

/*
objref stim
node[0] stim = new IClamp(.5)
stim.amp = 0
stim.dur = 0.2
stim.del = 5
*/

proc define_geometry(){	//define the coordinates of each compartment based on the give axon trajectory and node spacing
	
	//use vectors to describe the trajectories of the line segments connecting nodes

	forall pt3dclear()

	for i = 0,axonnodes-2 {

		//load in the coordinates of the surrounding nodes to determine the MYSA, FLUT, and STIN coordinates in between
		//convert all coordinates to um
		x0 = nx.x[i] * 1e6
		y0 = ny.x[i] * 1e6
		z0 = nz.x[i] * 1e6
		x1 = nx.x[i+1] * 1e6
		y1 = ny.x[i+1] * 1e6
		z1 = nz.x[i+1] * 1e6
		P0P1 = sqrt((x1-x0)^2+(y1-y0)^2+(z1-z0)^2)

		if (i==0) {	//define the first node of the axon, only need to define for first node, because remaining nodes are defined at the end of the loop
			t0 = (-1*nodelength/2)/P0P1
			t1 = t0+nodelength/P0P1
			xx0 = (1-t0)*x0 + t0*x1
			yy0 = (1-t0)*y0 + t0*y1
			zz0 = (1-t0)*z0 + t0*z1
			xx1 = (1-t1)*x0 + t1*x1
			yy1 = (1-t1)*y0 + t1*y1
			zz1 = (1-t1)*z0 + t1*z1
			node[i]{ 
				pt3dadd(xx0,yy0,zz0,node[i].diam)
				pt3dadd(xx1,yy1,zz1,node[i].diam) }		
		}

		//first MYSA compartment
		t0 = nodelength/2/P0P1
		t1 = t0+paralength1/P0P1
		xx0 = (1-t0)*x0 + t0*x1
		yy0 = (1-t0)*y0 + t0*y1
		zz0 = (1-t0)*z0 + t0*z1
		xx1 = (1-t1)*x0 + t1*x1
		yy1 = (1-t1)*y0 + t1*y1
		zz1 = (1-t1)*z0 + t1*z1
		MYSA[2*i]{ 
			pt3dadd(xx0,yy0,zz0,MYSA[2*i].diam)
			pt3dadd(xx1,yy1,zz1,MYSA[2*i].diam) }

		//first FLUT compartment		
		t0 = t1
		t1 = t0+paralength2/P0P1
		xx0 = (1-t0)*x0 + t0*x1
		yy0 = (1-t0)*y0 + t0*y1
		zz0 = (1-t0)*z0 + t0*z1
		xx1 = (1-t1)*x0 + t1*x1
		yy1 = (1-t1)*y0 + t1*y1
		zz1 = (1-t1)*z0 + t1*z1
		FLUT[2*i]{ 
			pt3dadd(xx0,yy0,zz0,FLUT[2*i].diam)
			pt3dadd(xx1,yy1,zz1,FLUT[2*i].diam) }

		//STIN compartments, need to have defined the number of STIN compartments per internode
		for gg = 0,nstins-1 {
			t0 = t1
			t1 = t0+interlength/P0P1
			xx0 = (1-t0)*x0 + t0*x1
			yy0 = (1-t0)*y0 + t0*y1
			zz0 = (1-t0)*z0 + t0*z1
			xx1 = (1-t1)*x0 + t1*x1
			yy1 = (1-t1)*y0 + t1*y1
			zz1 = (1-t1)*z0 + t1*z1
			STIN[nstins*i+gg]{ 
				pt3dadd(xx0,yy0,zz0,STIN[nstins*i+gg].diam)
				pt3dadd(xx1,yy1,zz1,STIN[nstins*i+gg].diam) }
		}

		//second FLUT compartment
		t0 = t1
		t1 = t0+paralength2/P0P1
		xx0 = (1-t0)*x0 + t0*x1
		yy0 = (1-t0)*y0 + t0*y1
		zz0 = (1-t0)*z0 + t0*z1
		xx1 = (1-t1)*x0 + t1*x1
		yy1 = (1-t1)*y0 + t1*y1
		zz1 = (1-t1)*z0 + t1*z1
		FLUT[2*i+1]{ 
			pt3dadd(xx0,yy0,zz0,FLUT[2*i+1].diam)
			pt3dadd(xx1,yy1,zz1,FLUT[2*i+1].diam) }

		//second MYSA compartment
		t0 = t1
		t1 = t0+paralength1/P0P1
		xx0 = (1-t0)*x0 + t0*x1
		yy0 = (1-t0)*y0 + t0*y1
		zz0 = (1-t0)*z0 + t0*z1
		xx1 = (1-t1)*x0 + t1*x1
		yy1 = (1-t1)*y0 + t1*y1
		zz1 = (1-t1)*z0 + t1*z1
		MYSA[2*i+1]{ 
			pt3dadd(xx0,yy0,zz0,MYSA[2*i+1].diam)
			pt3dadd(xx1,yy1,zz1,MYSA[2*i+1].diam) }

		//second node of Ranvier
		t0 = t1
		t1 = t0+nodelength/P0P1
		xx0 = (1-t0)*x0 + t0*x1
		yy0 = (1-t0)*y0 + t0*y1
		zz0 = (1-t0)*z0 + t0*z1
		xx1 = (1-t1)*x0 + t1*x1
		yy1 = (1-t1)*y0 + t1*y1
		zz1 = (1-t1)*z0 + t1*z1
		node[i+1]{ 
			pt3dadd(xx0,yy0,zz0,node[i+1].diam)
			pt3dadd(xx1,yy1,zz1,node[i+1].diam) }
	}
}
define_geometry()


//finitialize(v_init)
//fcurrent()
